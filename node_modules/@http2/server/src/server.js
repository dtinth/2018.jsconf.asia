const {join, resolve} = require('path')
const {promisify} = require('util')
const {readFile, readFileSync} = require('fs')
const {app} = require('./app')
const ocsp = require('ocsp')
const {createSecureServer} = require('http2')
const {createSecureContext} = require('tls')
const isDomainName = require('is-domain-name')
const isIp = require('is-ip')

async function read (filepath) {
  const resolved = resolve(process.cwd(), filepath)
  return promisify(readFile)(resolved)
}

function readSync (filepath) {
  const resolved = resolve(process.cwd(), filepath)
  return readFileSync(resolved)
}

module.exports.server = (options, files) => {
  const requestListener = app(options, files)
  const fallbackKey = readSync(options.https.key)
  const fallbackCert = readSync(options.https.cert)
  const fallbackCa = options.https.ca.map(readSync)
  const fallbackSecureContext = createSecureContext({
    ecdhCurve: 'P-384:P-256',
    key: fallbackKey,
    cert: fallbackCert,
    ca: fallbackCa
  })
  const serverOptions = {
    allowHTTP1: true,
    ecdhCurve: 'P-384:P-256',
    key: fallbackKey,
    cert: fallbackCert,
    ca: fallbackCa,
    SNICallback: async (servername, callback) => {
      if (!(isDomainName(servername) || isIp(servername))) {
        return callback(null, fallbackSecureContext)
      }
      try {
        callback(null, createSecureContext({
          ecdhCurve: 'P-384:P-256',
          key: await read(join(options.acme.store, servername, 'key.pem')),
          cert: await read(join(options.acme.store, servername, 'cert.pem'))
        }))
      } catch (error) {
        return callback(null, fallbackSecureContext)
      }
    }
  }
  const server = createSecureServer(serverOptions, requestListener)

  const cache = new ocsp.Cache()
  server.on('OCSPRequest', (certificate, issuer, callback) => {
    if (!issuer) return callback()
    ocsp.getOCSPURI(certificate, (error, uri) => {
      if (error) return callback(error)
      const request = ocsp.request.generate(certificate, issuer)
      const options = {
        url: uri,
        ocsp: request.data
      }
      cache.request(request.id, options, callback)
    })
  })

  return server
}
