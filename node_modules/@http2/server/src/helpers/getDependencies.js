const micromatch = require('micromatch')

function isUncompressed (absolute) {
  return !absolute.endsWith('.gz') &&
    !absolute.endsWith('.br') &&
    !absolute.endsWith('.deflate')
}

module.exports.getDependencies =
function getDependencies (sourceFile, manifest, fileIndex) {
  const filepaths = Array
    .from(fileIndex.relative.keys())
    .filter(isUncompressed)
  const dependencies = new Set()
  trace(sourceFile, manifest, fileIndex, filepaths, dependencies)
  dependencies.delete(sourceFile)
  return dependencies
}

function trace (sourceFile, manifest, fileIndex, filepaths, dependencies) {
  for (const rule of manifest) {
    if (micromatch.any(sourceFile.relative, rule.glob)) {
      for (const {glob} of rule.push) {
        const deps = micromatch(filepaths, glob)
        for (const dep of deps) {
          const depFile = fileIndex.relative.get(dep)
          if (!dependencies.has(depFile)) {
            dependencies.add(depFile)
            trace(depFile, manifest, fileIndex, filepaths, dependencies)
          }
        }
      }
    }
  }
  return dependencies
}

// const manifest = [
//   {
//     uri: ['/'], // URI Template desubstitution (capture)
//     glob: ['index.html'],
//     push: ['style.css', 'app.js'] // if /^https?:\/\// -> URI Template substitution (fill)
//                                   // else if String -> file path
//   },
//   {
//     glob: ['style.css'],
//     push: ['fonts.css', 'layout.css']
//   },
//   {
//     glob: ['app.js'],
//     push: [
//       // 'lib.js'
//       {
//         glob: ['lib.js'],
//         priority: 16
//       },
//       // ['https://example.net/foo.js', 'https://example.net/bar.js']
//       {
//         uri: [
//           'https://example.net/foo.js',
//           'https://example.net/bar.js'
//         ],
//         priority: 16
//       },
//       // custom
//       {
//         glob: ['settings.js'],
//         priority: 256
//       }
//     ]
//   }
// ]
